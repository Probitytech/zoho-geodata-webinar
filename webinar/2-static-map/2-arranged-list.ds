html = "";
if(ifnull(record_id,"") != "")
{
	// calculate distance in meters
	dist = floor(ifnull(distance,"20").toLong() * 1609.0);
	// get center of map
	rec = Visit[ID == input.record_id.toLong()];
	center = Apartment[ID == rec.Apartment];
	//
	// get the square boundaries from center with specified distance
	br = thisapp.geo.square_bounds(center.latitude1,center.longitude1,dist);
	//
	// filter apartments using  square boundaries 
	points = Apartment[latitude1 >= br.get("latmin") && latitude1 <= br.get("latmax") && longitude1 >= br.get("longmin") && longitude1 <= br.get("longmax")] range from 1 to 200;
	//
	// create the index for points
	distance_index = Collection();
	//
	// iterate points, filter by distance, add to index
	for each  point in points
	{
		//calculate the range for each point
		range = thisapp.geo.distance(center.latitude1,center.longitude1,point.latitude1,point.longitude1);
		if(range < dist && point.ID != center.ID)
		{
			// put on map only validated points
			distance_index.insert(point.ID:round(range / 1609,1));
		}
	}
	/*
		//			record_id.       : distance
		{
				"1581254000005241047": 17908.38,
				"1581254000005241079": 12295.88,
				"1581254000005241155": 13564.91,
				"1581254000005241167": 11995.01,
				"1581254000005241199": 9415.12,
				...
				"1581254000005243747": 16795.64,
				"1581254000005243907": 22025.39
		}
	*/
	//
	// Sort points by distance value 
	distance_index.sort();
	//
	// add sorted points on map 
	for each  point_id in distance_index.keys()
	{
		p = Apartment[ID == point_id.toLong()];
		popup_link = "#Form:Visit?Apartment=" + point_id + "&zc_LoadIn=dialog";
		html = html + "<div class='link-wrapper'>";
		html = html + "  <a id='" + point_id + "' target='_self' class='point' href='" + popup_link + "'>";
		html = html + "	    <div class='apartment-name'>" + p.Title + "</div>";
		html = html + "     <div class='distance'>" + distance_index.get(point_id) + "mi.</div>";
		html = html + "  </a>\n</div>";
	}
}